// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/model/object_box/member_local.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8881351773753499821),
      name: 'MemberLocal',
      lastPropertyId: const IdUid(20, 9124920453729092972),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7284311534193318255),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2373907226554139171),
            name: 'birthDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5500189430352603780),
            name: 'bloodBankCard',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1028467574959067789),
            name: 'bloodType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5726247579482211461),
            name: 'fatherName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8879497695384431797),
            name: 'homeNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 715534838801439985),
            name: 'lastDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 923716697325664972),
            name: 'lastDateDetail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 910968496390368371),
            name: 'memberCount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5963682381629269752),
            name: 'memberId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2429388799619325387),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5956309093790272715),
            name: 'note',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7156874995106747463),
            name: 'nrc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 760139413199234829),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2732820535343022158),
            name: 'quarter',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 2903797939001339464),
            name: 'region',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 7328884358842529452),
            name: 'registerDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 7605958491011915466),
            name: 'street',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 2239132915773313289),
            name: 'totalCount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 9124920453729092972),
            name: 'town',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 8881351773753499821),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    MemberLocal: EntityDefinition<MemberLocal>(
        model: _entities[0],
        toOneRelations: (MemberLocal object) => [],
        toManyRelations: (MemberLocal object) => {},
        getId: (MemberLocal object) => object.id,
        setId: (MemberLocal object, int id) {
          object.id = id;
        },
        objectToFB: (MemberLocal object, fb.Builder fbb) {
          final birthDateOffset = object.birthDate == null
              ? null
              : fbb.writeString(object.birthDate!);
          final bloodBankCardOffset = object.bloodBankCard == null
              ? null
              : fbb.writeString(object.bloodBankCard!);
          final bloodTypeOffset = object.bloodType == null
              ? null
              : fbb.writeString(object.bloodType!);
          final fatherNameOffset = object.fatherName == null
              ? null
              : fbb.writeString(object.fatherName!);
          final homeNoOffset =
              object.homeNo == null ? null : fbb.writeString(object.homeNo!);
          final lastDateOffset = object.lastDate == null
              ? null
              : fbb.writeString(object.lastDate!);
          final lastDateDetailOffset = object.lastDateDetail == null
              ? null
              : fbb.writeString(object.lastDateDetail!);
          final memberCountOffset = object.memberCount == null
              ? null
              : fbb.writeString(object.memberCount!);
          final memberIdOffset = object.memberId == null
              ? null
              : fbb.writeString(object.memberId!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final noteOffset =
              object.note == null ? null : fbb.writeString(object.note!);
          final nrcOffset =
              object.nrc == null ? null : fbb.writeString(object.nrc!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final quarterOffset =
              object.quarter == null ? null : fbb.writeString(object.quarter!);
          final regionOffset =
              object.region == null ? null : fbb.writeString(object.region!);
          final registerDateOffset = object.registerDate == null
              ? null
              : fbb.writeString(object.registerDate!);
          final streetOffset =
              object.street == null ? null : fbb.writeString(object.street!);
          final totalCountOffset = object.totalCount == null
              ? null
              : fbb.writeString(object.totalCount!);
          final townOffset =
              object.town == null ? null : fbb.writeString(object.town!);
          fbb.startTable(21);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, birthDateOffset);
          fbb.addOffset(2, bloodBankCardOffset);
          fbb.addOffset(3, bloodTypeOffset);
          fbb.addOffset(4, fatherNameOffset);
          fbb.addOffset(5, homeNoOffset);
          fbb.addOffset(6, lastDateOffset);
          fbb.addOffset(7, lastDateDetailOffset);
          fbb.addOffset(8, memberCountOffset);
          fbb.addOffset(9, memberIdOffset);
          fbb.addOffset(10, nameOffset);
          fbb.addOffset(11, noteOffset);
          fbb.addOffset(12, nrcOffset);
          fbb.addOffset(13, phoneOffset);
          fbb.addOffset(14, quarterOffset);
          fbb.addOffset(15, regionOffset);
          fbb.addOffset(16, registerDateOffset);
          fbb.addOffset(17, streetOffset);
          fbb.addOffset(18, totalCountOffset);
          fbb.addOffset(19, townOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MemberLocal()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..birthDate = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..bloodBankCard = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..bloodType = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..fatherName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..homeNo = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..lastDate = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..lastDateDetail = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..memberCount = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..memberId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..note = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..nrc = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 28)
            ..phone = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..quarter = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 32)
            ..region = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 34)
            ..registerDate = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 36)
            ..street = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 38)
            ..totalCount = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 40)
            ..town = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 42);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [MemberLocal] entity fields to define ObjectBox queries.
class MemberLocal_ {
  /// see [MemberLocal.id]
  static final id =
      QueryIntegerProperty<MemberLocal>(_entities[0].properties[0]);

  /// see [MemberLocal.birthDate]
  static final birthDate =
      QueryStringProperty<MemberLocal>(_entities[0].properties[1]);

  /// see [MemberLocal.bloodBankCard]
  static final bloodBankCard =
      QueryStringProperty<MemberLocal>(_entities[0].properties[2]);

  /// see [MemberLocal.bloodType]
  static final bloodType =
      QueryStringProperty<MemberLocal>(_entities[0].properties[3]);

  /// see [MemberLocal.fatherName]
  static final fatherName =
      QueryStringProperty<MemberLocal>(_entities[0].properties[4]);

  /// see [MemberLocal.homeNo]
  static final homeNo =
      QueryStringProperty<MemberLocal>(_entities[0].properties[5]);

  /// see [MemberLocal.lastDate]
  static final lastDate =
      QueryStringProperty<MemberLocal>(_entities[0].properties[6]);

  /// see [MemberLocal.lastDateDetail]
  static final lastDateDetail =
      QueryStringProperty<MemberLocal>(_entities[0].properties[7]);

  /// see [MemberLocal.memberCount]
  static final memberCount =
      QueryStringProperty<MemberLocal>(_entities[0].properties[8]);

  /// see [MemberLocal.memberId]
  static final memberId =
      QueryStringProperty<MemberLocal>(_entities[0].properties[9]);

  /// see [MemberLocal.name]
  static final name =
      QueryStringProperty<MemberLocal>(_entities[0].properties[10]);

  /// see [MemberLocal.note]
  static final note =
      QueryStringProperty<MemberLocal>(_entities[0].properties[11]);

  /// see [MemberLocal.nrc]
  static final nrc =
      QueryStringProperty<MemberLocal>(_entities[0].properties[12]);

  /// see [MemberLocal.phone]
  static final phone =
      QueryStringProperty<MemberLocal>(_entities[0].properties[13]);

  /// see [MemberLocal.quarter]
  static final quarter =
      QueryStringProperty<MemberLocal>(_entities[0].properties[14]);

  /// see [MemberLocal.region]
  static final region =
      QueryStringProperty<MemberLocal>(_entities[0].properties[15]);

  /// see [MemberLocal.registerDate]
  static final registerDate =
      QueryStringProperty<MemberLocal>(_entities[0].properties[16]);

  /// see [MemberLocal.street]
  static final street =
      QueryStringProperty<MemberLocal>(_entities[0].properties[17]);

  /// see [MemberLocal.totalCount]
  static final totalCount =
      QueryStringProperty<MemberLocal>(_entities[0].properties[18]);

  /// see [MemberLocal.town]
  static final town =
      QueryStringProperty<MemberLocal>(_entities[0].properties[19]);
}
